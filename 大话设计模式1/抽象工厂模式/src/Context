抽象工厂模式
菜鸟程序员碰到问题，只会用时间来摆平。
工厂方法模式是定义一个用于创建对象的接口，让子类决定实例化哪个类。
抽象工厂模式（abstract factory）提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。
abstractproducta和abstractproductb是两个抽象产品，roducta1、roducta2和productb1、productb2就是对两个抽象产品的具体分类的实现。ifactory是一个抽象工厂接口，它里面应该包含所有的产品创建的抽象方法。concretefactory1和concretefactory2就是具体的工厂。运行时，创建一个concretefactory类的实例，这个具体的工厂再创建具有特定实现的产品对象，也就是说，为创建不同的产品对象，客户端应使用不同的具体工厂。
好处：易于交换产品系列，由于具体工厂类在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，它只需要改变具体工厂即可使用不同的产品配置。他让具体的创建实例过程与客户端分离，客户端是同他们的抽象接口操纵实例，产品的具体类名也被具体的工厂实现分离，不出现在客户端代码中。
注：在所有用简单工厂的地方，都可以考虑用反射来去除switch或if，解除分支判断带来的耦合。
一个程序员如果没有熬夜写程序的经历，不能算是一个好程序员，因为他没有痴迷过，所以他不会有大成就。
