策略模式
策略模式是一种定义一系列 算法的方法，所遇的算法完成的都是相同的工作，只是实现不同，他可以以相同的方式调用所有的算法，坚守了各种算法与使用算法类之间的耦合。
优点1：策略模式的strategy类层次为context定义了一系列的可供重用的算法或行为继承有助于吸取出这些算法中的公共功能。
优点2：简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。
当不同的行为堆砌在一个类中时，就很难避免使用条件语句类选择合适的行为。将这些行为封装在一个个独立的strategy类中，可以在使用这些行为的类中消除条件语句。
策略模式就是用来封装算法的，但在时间中，我们发现可以用它来封装几乎任何类型的规则，只有在分析过程中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式这种变化的可能性。
在基本的策略模式中，选择所用具体实现的责任由客户端对象承担，并转给context对象。这本身并没有解除客户端需要选择判断的压力，而策略模式与简单工厂模式结合后，选择具体实现的责任也可以有context来承担，就最大化的减轻了客户端的责任。当和反射技术结合可进一步避免代码修改。
任何需求的变更都是需要成本的。

单一责任原则
就一个类而言，应该仅有一个引起他变化的原因。
软件设计真正要做的许多内容，就是发现责任并把那些责任相互分离。如果你能够想到多余一个的冬季去给便一个类，那么这个类就有多于一个的责任。

开放-封闭原则
是说软件实体（类、模块、函数等等）应该可以扩展，但是不可修改。
一、对于扩展是开放的（openfor extension）二、对于更改是封闭的（closed for modification）
开放封闭原则下的设计能面对需求的改变求可以保持相对稳定，从而使得系统可以在第一个版本后不断退出新的版本。
无论模块是多么封闭，都会有一些无法对之封闭的变化，既然不可能完全封闭，设计人员必须对于他设计的模块应该对哪些变化封闭做出选择。他必须线猜测出最有可能发生的变化种类，然后构造抽象来隔离哪些变化。
当变化发生时立即采取行动，在最初编写代码时，假设变化不会发生。当变化发生时，我们就创建抽象来隔离以后发生的同类变化。面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码。
我们希望的是在开发工作展开不久就知道可能发生的变化。查明可能发生的变化所等待的时间越长，就要创建正确的抽象就越困难。
开放封闭原则是面向对象设计的核心。应仅对程序中呈现出频繁变化的哪些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是个好注意。拒绝不成熟的抽象和抽象本身一样重要。

依赖倒转原则
高层模块不要依赖低层模块；抽象不应该依赖细节，细节应该依赖与抽象。就是要针对接口编程，不要对现实编程。
李氏代换原则
一个软件实体如果使用的是一个父类的化，那么一定适用于其子类，而且他察觉不出父类对象和子类对象的区别。也就是说，在软件里面，把父类都替换成他的子类，程序的行为没有变化。意义：只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。
依赖倒转可以说是面向对象设计的标志，用哪种语言编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或接口，那就是面向对象的设计，反过来就是过程化的设计。