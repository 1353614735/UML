单一责任原则
就一个类而言，应该仅有一个引起他变化的原因。
软件设计真正要做的许多内容，就是发现责任并把那些责任相互分离。如果你能够想到多余一个的冬季去给便一个类，那么这个类就有多于一个的责任。

开放-封闭原则
是说软件实体（类、模块、函数等等）应该可以扩展，但是不可修改。
一、对于扩展是开放的（openfor extension）二、对于更改是封闭的（closed for modification）
开放封闭原则下的设计能面对需求的改变求可以保持相对稳定，从而使得系统可以在第一个版本后不断退出新的版本。
无论模块是多么封闭，都会有一些无法对之封闭的变化，既然不可能完全封闭，设计人员必须对于他设计的模块应该对哪些变化封闭做出选择。他必须线猜测出最有可能发生的变化种类，然后构造抽象来隔离哪些变化。
当变化发生时立即采取行动，在最初编写代码时，假设变化不会发生。当变化发生时，我们就创建抽象来隔离以后发生的同类变化。面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码。
我们希望的是在开发工作展开不久就知道可能发生的变化。查明可能发生的变化所等待的时间越长，就要创建正确的抽象就越困难。
开放封闭原则是面向对象设计的核心。应仅对程序中呈现出频繁变化的哪些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是个好注意。拒绝不成熟的抽象和抽象本身一样重要。

依赖倒转原则
高层模块不要依赖低层模块；抽象不应该依赖细节，细节应该依赖与抽象。就是要针对接口编程，不要对现实编程。
李氏代换原则
一个软件实体如果使用的是一个父类的化，那么一定适用于其子类，而且他察觉不出父类对象和子类对象的区别。也就是说，在软件里面，把父类都替换成他的子类，程序的行为没有变化。意义：只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。
依赖倒转可以说是面向对象设计的标志，用哪种语言编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或接口，那就是面向对象的设计，反过来就是过程化的设计。
最少知识原则
迪米特，如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某个方法的话，可以通过第三者转发这个调用。
在类的结构设计上，每个类都应当尽量降低成员的访问权限。迪米特法制其根本思想是强调了类之间的松耦合。类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。
