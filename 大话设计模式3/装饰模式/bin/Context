装饰模式
可以将所需的功能按正确的顺序串联起来进行控制。
定义：动态地给一个对象添加一些额外的职能，就增加功能来说，装饰模式比生成子类更为灵活。
component是定义一个对象接口，可以给只写对象动态的添加职责。concretecomponent定义了一个具体的对象
，也可以给这个对象添加一些职责。decorator，装饰抽象类，继承了component，从外类来扩展component类的功能，
但对于component来说，是无需知道decorator的存在的。至于concretedecorator就是具体的装饰对象，
起到给component添加职责的功能。
装饰模式是利用setcomponent来对对象进行包装的，每个装饰对象的实现就和如何使用这个对象分离开了
，每个装饰对象只关心自己的功能，不需要关心如何被添加到对象链当中。
只有一个concretecomponent类而没有抽象的component类，那么decoraor类可以是concretecomponent的一个子类。
同样，如果只有一个concretedecorator类就没有必要建立一个单独的decorator类，而可以把decorator和concretedecorator
的责任合并成一个类。
装饰模式是为已有的功能动态的添加更多功能的一个方式。当系统需要新功能时候，是向旧的类中添加新的代码，
这些新的代码通常装饰了原有类的核心职责或主要行为，问题是在主类中加入类新的字段、方法和逻辑，从而增加了主类的复杂度，
而这些新加入的东西仅仅是为了满足一些只在某种特定情况下才回执行的特殊行为的需要。而装饰模式提供了一个非常好的解决方案，
他把每个要装饰的功能放在单独的类中，并让这个类包括他所要装饰的对象，因此，当需要执行特殊行为时，
客户端可以根据需要有选择的、按顺序的使用装饰功能包装对象。
优点：把类的装饰功能从类中搬移去除，这样可以简化原有的类。有效的把类的核心职责和装饰功能区分开了。
而且可以去除相关类中重复的装饰逻辑。
